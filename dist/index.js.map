{"version":3,"sources":["../src/index.ts","../src/api/Api.ts","../src/api/SalesforceApi.ts","../src/api/UiLayout.ts","../src/common/SalesforceUsers.ts","../src/common/pages/AbstractPage.ts","../src/common/pages/SalesforcePage.ts","../src/common/pages/SalesforceLoginPage.ts","../src/auth/SalesforceAuthenticator.ts","../src/cli/SalesforceCli.ts","../src/common/SOQLBuilder.ts","../src/common/SalesforceNavigator.ts","../src/common/SalesforceObject.ts","../src/common/pages/FlexiPage.ts","../src/common/Fixtures.ts"],"sourcesContent":["export * from 'api/Api'\nexport * from 'api/SalesforceApi'\nexport * from 'api/UiLayout'\nexport * from 'auth/SalesforceAuthenticator'\nexport * from 'auth/AuthorizationTypes'\nexport * from 'cli/SalesforceCli'\nexport * from 'common/SOQLBuilder'\nexport * from 'common/SalesforceNavigator'\nexport * from 'common/SalesforceObject'\nexport * from 'common/SalesforceUsers'\nexport * from 'common/pages/AbstractPage'\nexport * from 'common/pages/SalesforceLoginPage'\nexport * from 'common/Fixtures'","import { Page, TestInfo } from \"@playwright/test\"\n\nexport abstract class Api {\n    testInfo: TestInfo\n    abstract Ready: Promise<Api>\n}","import { Page, expect } from \"@playwright/test\";\nimport { Connection, ExecuteAnonymousResult, MetadataInfo, QueryResult, Record, RecordResult, SalesforceId } from \"jsforce\"\nimport { RecordUiData, UiLayout } from \"api/UiLayout\";\nimport { SalesforceFrontdoorData } from \"auth/AuthorizationTypes\";\nimport { Api } from \"api/Api\";\nimport { SalesforceNavigator } from \"common/SalesforceNavigator\";\nimport { SalesforcePage } from \"common/pages/SalesforcePage\";\n\nexport class NoRecordsReturnedError extends Error {\n\tconstructor(msg: string) {\n\t\tsuper(msg)\n\t}\n}\n\nexport class SalesforceApi extends Api {\n\tprivate version: string\n\tprivate conn: Connection;\n\tReady: Promise<this>;\n\n\tconstructor(frontdoorData: SalesforceFrontdoorData, version?: string) {\n\t\tsuper()\n        version ? this.version = version : this.version = '57.0'\n\t\tthis.Ready = new Promise<this>((connect) => {\n\t\t\ttry {\n                this.conn = new Connection({\t\t\t\n                    instanceUrl: frontdoorData.instance,\n                    sessionId: frontdoorData.sessionId,\n                    version: this.version\n                });\n\t\t\t\tconnect(this);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(`unable to initialize SFDC API due to:\\n${error}`);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate parseLayoutFromLayoutResponse(layoutData: RecordUiData): UiLayout {\n\t\tconst sfdcEtag = /[a-zA-Z0-9]{32}/gm;\n\t\tconst sfdcLongId = /[a-zA-Z0-9]{18}/gm;\n\t\tconst filter = /\"filter\":.+\",/gm;\n\t\tconst placeholder = /\"placeholder\":.+\",/gm;\n\t\treturn JSON.parse(JSON.stringify(layoutData, null, 3)\n\t\t\t.replace(sfdcEtag, \"\")\n\t\t\t.replace(sfdcLongId, \"\")\n\t\t\t.replace(filter, \"\")\n\t\t\t.replace(placeholder, \"\")\n\t\t) as UiLayout;\n\t}\n\n\tprivate async readRecordUi(recordId: string, options?: RecordUiData): Promise<MetadataInfo | MetadataInfo[]> {\n\t\toptions = options ? options : {\n\t\t\tFull: { Edit: true, Create: true, View: true },\n\t\t\tCompact: { Edit: true, Create: true, View: true }\n\t\t};\n\t\tconst types = () => {\n\t\t\tlet types = '';\n\t\t\toptions?.Full ? types += 'Full' : null;\n\t\t\toptions?.Compact ? types ? types += ',Compact' : types += 'Compact' : null;\n\t\t\tif (!types) throw new Error(`missing layout types for ui-record request:\\n${JSON.stringify(options)}`);\n\t\t\telse return types;\n\t\t}\n\n\t\tconst modes = () => {\n\t\t\tlet modes = '';\n\t\t\tif (options && options.Full) {\n\t\t\t\tif (!(options as any).Full) {\n\t\t\t\t\t(options as any).Full = options.Compact;\n\t\t\t\t}\n\n\t\t\t\tif (options.Full.Create) {\n\t\t\t\t\tmodes += 'Create';\n\t\t\t\t}\n\n\t\t\t\tif (options.Full.Edit) {\n\t\t\t\t\tmodes += modes ? ',Edit' : 'Edit';\n\t\t\t\t}\n\n\t\t\t\tif (options.Full.View) {\n\t\t\t\t\tmodes += modes ? ',View' : 'View';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!modes) throw new Error(`missing layout modes for ui-record request:\\n${JSON.stringify(options)}`);\n\t\t\telse return modes;\n\t\t};\n\n\t\tconst resource = `/ui-api/record-ui/${recordId}?layoutTypes=${types()}&modes=${modes()}`;\n\t\ttry {\n\t\t\treturn this.conn.request({ method: 'Get', url: resource });\n\t\t} catch (error) {\n\t\t\tthrow new Error(`unable to retrieve ${resource} due to:\\n${error}`);\n\t\t}\n\t}\n\n\tprivate async readApps(formFactor?: 'Large' | 'Medium' | 'Small', userCustomizations?: boolean): Promise<MetadataInfo | MetadataInfo[]> {\n\t\tconst formFactorParam = formFactor ? `?formFactor=${formFactor}` : `?formFactor=Large`;\n\t\tconst userCustomizationsParam = userCustomizations ? `&userCustomizations=${userCustomizations}` : '';\n\t\tconst resource = `/ui-api/apps${formFactorParam}${userCustomizationsParam}`;\n\t\ttry {\n\t\t\tlet result = await this.conn.request({ method: 'Get', url: resource });\n\t\t\tconst sfdcEtag = /[a-zA-Z0-9]{32}/gm;\n\t\t\tconst sfdcLongId = /[a-zA-Z0-9]{18}/gm;\n\t\t\tconst url = /^.*\\bhttps\\b.*$/gm;\n\t\t\treturn JSON.parse(JSON.stringify(result, null, 3)\n\t\t\t\t.replace(sfdcEtag, \"\")\n\t\t\t\t.replace(sfdcLongId, \"\")\n\t\t\t\t.replace(url, \"\"));\n\t\t} catch (error) {\n\t\t\tthrow new Error(`unable to fetch available Apps due to:\\n${error}`);\n\t\t}\n\t}\n\n\tprivate async readLayoutsFromOrg(recordId: string, options?: RecordUiData): Promise<UiLayout> {\n\t\ttry {\n\t\t\tlet data = Object.values((await this.readRecordUi(recordId, options) as any).layouts)[0];\n\t\t\tdata = this.parseLayoutFromLayoutResponse(data as RecordUiData);\n\t\t\treturn new UiLayout(Object.values(data as unknown[])[0] as UiLayout);\n\t\t} catch (error) {\n\t\t\tthrow new Error(`Unable to read Layout data from org due to:\\n${error}`)\n\t\t}\n\t}\n\n\tasync create(sobject: string, data: object | object[]): Promise<RecordResult | RecordResult[]> {\n\t\ttry {\n\t\t\treturn await this.conn.create(sobject, data, { allOrNone: true });\n\t\t} catch (error) {\n\t\t\tthrow new Error(`unable to create ${sobject} due to:\\n${error}`);\n\t\t}\n\t}\n\n\tasync update(sobject: string, data: object | object[]): Promise<RecordResult | RecordResult[]> {\n\t\ttry {\n\t\t\treturn await this.conn.update(sobject, data, { allOrNone: true });\n\t\t} catch (error) {\n\t\t\tthrow new Error(`unable to update ${sobject} with data:\\n${JSON.stringify(data, null, 3)}\\ndue to:\\n${error}`);\n\t\t}\n\t}\n\n\tasync delete(sobject: string, id: SalesforceId | SalesforceId[]): Promise<RecordResult | RecordResult[]> {\n\t\ttry {\n\t\t\treturn await this.conn.delete(sobject, id);\n\t\t} catch (error) {\n\t\t\tthrow new Error(`unable to delete ${sobject} record ${id} due to:\\n${error}`);\n\t\t}\n\t}\n\n\tasync read(sobject: string, id: SalesforceId | SalesforceId[]): Promise<Record | Record[]> {\n\t\ttry {\n\t\t\treturn await this.conn.retrieve(sobject, id);\n\t\t} catch (error) {\n\t\t\tthrow new Error(`unable to read ${sobject} record ${id} due to:\\n${error}`);\n\t\t}\n\t}\n\n\tasync query(soql: string): Promise<QueryResult<unknown>> {\n\t\tlet result: QueryResult<unknown>;\n\t\ttry {\n\t\t\tresult = await this.conn.query(soql);\n\t\t} catch (error) {\n\t\t\tthrow new Error(`unable to execute soql:\\n${soql}\\ndue to:\\n$\\n${error}`);\n\t\t}\n\t\tif (!result.records.length) {\n\t\t\tthrow new NoRecordsReturnedError(`no records returned by soql:\\n${soql}`);\n\t\t} else return result;\n\t}\n\n\tasync executeApex(apexBody: string): Promise<ExecuteAnonymousResult> {\n\t\tlet result: ExecuteAnonymousResult;\n\t\ttry {\n\t\t\tresult = await this.conn.tooling.executeAnonymous(apexBody);\n\t\t} catch (error) {\n\t\t\tthrow new Error(`unable to execute anonymous apex:\\n${apexBody}\\ndue to:\\n${error}`);\n\t\t}\n\t\tif (!result.success) {\n\t\t\tthrow new Error(`exception running anonymous apex:\\n${apexBody}\\ndue to:\\n${result.exceptionMessage}\\n${result.exceptionStackTrace}`);\n\t\t} else return result;\n\t}\n\n\tasync validateRecordLayoutsFor(recordId: string, page?: Page, options?: RecordUiData) {\n\t\ttry {\n\t\t\tconst orgLayouts = this.readLayoutsFromOrg(recordId, options);\n\t\t\tif (page && this.testInfo){\n\t\t\t\tawait Promise.all([\n\t\t\t\t\torgLayouts,\n\t\t\t\t\tSalesforceNavigator.openResource(recordId, page)\n\t\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\t\tconst currentPage = new SalesforcePage(page)\n\t\t\t\t\t\t\tawait currentPage.attachScreenshotToTestInfo(\n\t\t\t\t\t\t\t\tawait currentPage.captureFullPageScreenshot(), \n\t\t\t\t\t\t\t\tthis.testInfo)\n\t\t\t\t\t\t})\n\t\t\t\t]);\n\t\t\t}\n\t\t\texpect(JSON.stringify(await orgLayouts, null, 3)).toMatchSnapshot()\n\t\t} catch (error) {\n\t\t\tthrow new Error(`Layouts validation via UI-API failed due to:\\n${error}`);\n\t\t}\n\t}\n\n\tasync validateAppsAndTabsFor(page?: Page) {\n\t\ttry {\n\t\t\tconst orgApps = this.readApps();\n\t\t\tif (page && this.testInfo){\n\t\t\t\tawait Promise.all([\n\t\t\t\t\torgApps,\n\t\t\t\t\tSalesforceNavigator.openHome(page)\n\t\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\t\tawait page.getByRole('button', { name: 'App Launcher' }).click()\n\t\t\t\t\t\t\tconst currentPage = new SalesforcePage(page)\n\t\t\t\t\t\t\tawait currentPage.attachScreenshotToTestInfo(\n\t\t\t\t\t\t\t\tawait currentPage.captureScreenshot({fullPage: false}), \n\t\t\t\t\t\t\t\tthis.testInfo)\n\t\t\t\t\t\t})\n\t\t\t\t])\n\t\t\t}\n\t\t\texpect(JSON.stringify(await orgApps, null, 3)).toMatchSnapshot()\n\t\t} catch (error) {\n\t\t\tthrow new Error(`Apps validation via UI-API failed due to:\\n${error}`);\n\t\t}\n\t}\n}\n","export interface RecordUiData {\n    Compact?: LayoutMode,\n    Full?: LayoutMode\n}\n\ninterface LayoutMode {\n    Create?: Layout | boolean,\n    Edit?: Layout | boolean,\n    View?: Layout | boolean\n}\n\ninterface Layout {\n    sections: any\n}\n\nexport class UiLayout implements RecordUiData {\n    Compact?: LayoutMode;\n    Full?: LayoutMode;\n\n    constructor(data: RecordUiData){\n        this.Compact = data.Compact;\n        this.Full = data.Full;\n    }\n}\n\n","import { Browser, Page, chromium } from \"@playwright/test\";\nimport { DefaultCliUserInfo, StorageState } from \"auth/AuthorizationTypes\";\nimport { SalesforceAuthenticator } from \"auth/SalesforceAuthenticator\";\nimport { SalesforceCliHandler } from \"cli/SalesforceCli\";\nimport { SalesforceNavigator } from \"common/SalesforceNavigator\";\nimport { SalesforceApi } from \"api/SalesforceApi\";\nimport { SOQLBuilder } from \"common/SOQLBuilder\";\nimport { QueryResult } from \"jsforce\";\n\nexport interface SalesforceUserDefinition {\n    details?: {}\n    permissionSets?: string[]\n}\n\nexport class SalesforceDefaultCliUser {\n    static _instance: Promise<SalesforceDefaultCliUser>\n    private browser: Browser\n    private Ready: Promise<this>\n    authorizationState: StorageState\n    info: DefaultCliUserInfo\n    ui: Page\n    api: SalesforceApi\n\n    private constructor(authenticator: SalesforceAuthenticator){\n        this.Ready = new Promise(async (makeReady) => {\n            const handler = authenticator.usingCli(new SalesforceCliHandler())\n            this.info = await handler.defaultUserData\n            this.api = await handler.loginToApi()\n            this.browser = await chromium.launch({headless: true})\n            this.ui = await this.browser.newContext().then(context => context.newPage())\n            this.authorizationState = await handler.loginToUi(this.ui)\n            makeReady(this)\n        })\n    }\n\n    static get instance(){\n        if(!SalesforceDefaultCliUser._instance){\n            return SalesforceDefaultCliUser._instance = \n                new SalesforceDefaultCliUser(new SalesforceAuthenticator()).Ready\n        } else return SalesforceDefaultCliUser._instance\n    }\n\n\n    async impersonateCrmUser(salesforceUserId: string): Promise<StorageState> {\n        const impersonationUrl = SalesforceNavigator.buildImpersonationUrl({\n            instanceUrl: new URL(this.info.result.url).origin,\n            orgId: this.info.result.orgId,\n            targetUserId: salesforceUserId\n        }).toString()\n        const isolatedPage = await this.browser.newContext().then(context => context.newPage())\n        await isolatedPage.context().addCookies(this.authorizationState.cookies)\n        await isolatedPage.goto(impersonationUrl, {waitUntil: 'commit'})\n        const otherCrmUserStorageData = await isolatedPage.context().storageState()\n        await isolatedPage.context().close()\n        return otherCrmUserStorageData\n    }\n}\n\nexport abstract class SalesforceStandardUser {\n    private static _cached: Map<string, Promise<StorageState>> = new Map()\n    abstract config: SalesforceUserDefinition\n    ui: Page\n    api: SalesforceApi\n    Ready: Promise<this>\n\n    constructor(mods?: SalesforceUserDefinition){\n        this.Ready = new Promise(async (makeReady) => {\n            this.config = {...this.config, ...mods}\n            const frontdoor = await SalesforceDefaultCliUser.instance\n                .then(instance => instance.info.result.url)\n            const sessionId = (await this.cached).cookies\n                .filter(cookie => cookie.name === 'sid' && \n                    frontdoor.includes(cookie.domain)\n                )[0].value\n            const instance = new URL(frontdoor).origin\n            const frontDoor = {instance: instance, sessionId: sessionId}\n            this.api = await new SalesforceApi(frontDoor).Ready\n            makeReady(this)\n        })\n    }\n\n    get cached() {\n        if (!SalesforceStandardUser._cached.get(this.constructor.name)){\n            return SalesforceDefaultCliUser.instance.then(cliUser => {\n                const users = new SOQLBuilder().crmUsersMatching(this.config)\n                return cliUser.api.query(users).then(result => {\n                    const selected = (result as QueryResult<any>).records[0].Id\n                    SalesforceStandardUser._cached.set(this.constructor.name, cliUser.impersonateCrmUser(selected))\n                    return SalesforceStandardUser._cached.get(this.constructor.name)\n                })\n            })\n        } else return SalesforceStandardUser._cached.get(this.constructor.name)\n    }\n\n    async use(browser: Browser): Promise<this> {\n        const context = await browser.newContext()\n        await context.addCookies((await this.cached).cookies)\n        this.ui = await context.newPage()\n        return this\n    }\n}\n","import { Page, TestInfo } from \"@playwright/test\";\n\nexport abstract class AbstractPage {\n    public ui: Page\n\n    constructor(page: Page) {\n        this.ui = page\n    }\n\n    public async attachScreenshotToTestInfo(screenshot: Buffer, testInfo: TestInfo){\n        await testInfo.attach('screenshot', { body: screenshot, contentType: 'image/png' })\n    }\n\n    public async captureScreenshot(options: {fullPage?: boolean}): Promise<Buffer>{\n        await this.ui.waitForLoadState('networkidle')\n        return this.ui.screenshot({fullPage: options.fullPage});\n    }\n\n    public async captureFullPageScreenshot(): Promise<Buffer>{\n        await this.ui.waitForLoadState('networkidle')\n        await this.ui.evaluate(() => window.scrollTo(0, document.documentElement.scrollHeight));\n        await this.ui.evaluate(() => window.scrollTo(document.documentElement.scrollHeight, 0));\n        return this.captureScreenshot({fullPage: true})\n    }\n\n    public async scrollPageBottomTop(){\n        await this.ui.evaluate(() => window.scrollTo(0, document.documentElement.scrollHeight));\n        await this.ui.evaluate(() => window.scrollTo(document.documentElement.scrollHeight, 0));\n    }\n\n    public async scrollPageTopBottom(){\n        await this.ui.evaluate(() => window.scrollTo(document.documentElement.scrollHeight, 0));\n        await this.ui.evaluate(() => window.scrollTo(0, document.documentElement.scrollHeight));\n    }\n}","import { AbstractPage } from \"./AbstractPage\";\n\nexport class SalesforcePage extends AbstractPage{}","import { Page } from \"@playwright/test\";\nimport { StorageState, UsernamePassword } from \"auth/AuthorizationTypes\";\nimport { SalesforcePage } from \"./SalesforcePage\";\n\nexport class SalesforceLoginPage extends SalesforcePage {\n    readonly instance: URL\n    readonly username = this.ui.getByLabel('Username')\n    readonly password = this.ui.getByLabel('Password')\n    readonly loginButton = this.ui.getByRole('button').getByText('Log In')\n\n    constructor(page: Page, instance: URL){\n        super(page)\n        this.instance = instance\n    }\n\n    async loginUsing(credentials: UsernamePassword): Promise<StorageState> {\n        await this.ui.goto(this.instance.toString())\n        await this.username.fill(credentials.username)\n        await this.password.fill(credentials.password)\n        await this.loginButton.click()\n        return this.ui.context().storageState()\n    }\n}","import { Page } from \"@playwright/test\"\nimport { SalesforceCliHandler } from \"cli/SalesforceCli\"\nimport { SalesforceNavigator } from \"common/SalesforceNavigator\"\nimport { SalesforceApi } from \"api/SalesforceApi\"\nimport { ApiGateway, DefaultCliUserInfo, SalesforceFrontdoorData, SalesforceInstance, StorageState, UiGateway, UsernamePassword } from \"auth/AuthorizationTypes\"\nimport { SalesforceLoginPage } from \"common/pages/SalesforceLoginPage\"\n\nclass DefaultCliUserHandler implements UiGateway, ApiGateway{\n    private cli: SalesforceCliHandler\n    _defaultUserData: Promise<DefaultCliUserInfo>\n\n    constructor(cliHandler: SalesforceCliHandler){\n        this.cli = cliHandler\n    }\n\n    get defaultUserData() {\n        try {\n            if (!this._defaultUserData){\n                this._defaultUserData = this.cli.exec({\n                    cmd: 'org open',\n                    f: ['--json', '-r']\n                }) as unknown as Promise<DefaultCliUserInfo>\n            }\n        } catch (error) {\n            throw new Error(`unable to authorize default cli user\n                \\ndue to:\n                \\n${error}`);\n        }\n        return this._defaultUserData\n    }\n    \n\n    private async parseFrontDoorData(): Promise<SalesforceFrontdoorData> {\n        const loginUrl = new URL((await this.defaultUserData).result.url)\n        return {\n            instance: loginUrl.origin,\n            sessionId: loginUrl.searchParams.get(SalesforceNavigator.SESSIONID_PARAM)\n        }\n    }\n\n    async loginToUi(page: Page): Promise<StorageState> {\n        await page.goto((await this.defaultUserData).result.url, {waitUntil: 'commit'})\n        return page.context().storageState()\n    }\n\n    async loginToApi(): Promise<SalesforceApi> {\n        return new SalesforceApi(await this.parseFrontDoorData()).Ready\n    }\n}\n\nclass CredentialsHandler implements UiGateway {\n    private credentials: UsernamePassword\n    instance: URL\n\n    constructor(credentials: UsernamePassword, instance: SalesforceInstance){\n        this.credentials = credentials\n        switch (instance) {\n            case 'PRODUCTION':\n                this.instance = SalesforceNavigator.PRODUCTION_LOGIN_URL\n                break;\n            case 'SANDBOX':\n                this.instance = SalesforceNavigator.SANDBOX_LOGIN_URL\n                break;\n            default:\n                this.instance = instance\n        }\n    }\n\n    async loginToUi(page: Page): Promise<StorageState> {\n        return new SalesforceLoginPage(page, this.instance)\n            .loginUsing(this.credentials)\n    }\n}\n\nexport class SalesforceAuthenticator {\n    usingCli = (handler: SalesforceCliHandler) => \n        new DefaultCliUserHandler(handler)\n    usingCredentials = (credentials: UsernamePassword, instance: SalesforceInstance) => \n        new CredentialsHandler(credentials, instance)\n}\n","import { exec } from 'child_process'\n\ninterface SalesforceCliParameters {\n    cmd: string,\n    f?: Array<string>,\n    log?: boolean\n}\nexport class SalesforceCliHandler {\n    private path: string\n\n    constructor(path: string = 'sf') {\n        this.path = path\n    }\n\n    private pass(params: string[]): string {\n        return params.join(' ')\n    }\n\n    private parseResponse(response: string): Object {\n        try {\n            const cliColoring = /[\\u001b\\u009b][[()#?]*(?:[0-9]{1,4}(?:[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g\n            response = response.replace(cliColoring, '')\n            return JSON.parse(response)\n        }\n        catch (error) {\n            throw new Error(`unable to parse SFDX command response:\\n\\n${response}\\n\\ndue to:\\n${error}`)\n        }\n    }\n\n    public async exec({ cmd, f: flags, log }: SalesforceCliParameters): Promise<any> {\n        const fullCommand = `${this.path} ${cmd} ${flags ? this.pass(flags) : ''}`\n        if (log) console.info(`Executing ${this.path} command: ${fullCommand}`)\n        return new Promise<any>((resolve) => {\n            exec(fullCommand, (error, stdout) => {\n                if (error && error.code === 1) {\n                    throw new Error(`${this.path} command failed with exit code: ${error.code} caused by:\\n${error.message}\n                        \\nError details:\\n${JSON.stringify(this.parseResponse(stdout), null, 3)}`)\n                } else {\n                    resolve(flags?.includes('--json') ? this.parseResponse(stdout) : stdout)\n                }\n            })\n        })\n    }\n}","import { SalesforceUserDefinition } from \"common/SalesforceUsers\";\n\nexport class SOQLBuilder {\n    private parseValue(value: unknown){\n        if(typeof value == 'boolean'){\n            return `${value}`\n        } else {\n            return `'${value}'`\n        }\n    }\n\n    crmUsersMatching(config: SalesforceUserDefinition): string{\n        const soql: string[] = [] \n        soql.push(`SELECT Id, Username FROM USER`)\n        soql.push(`WHERE IsActive = true`)\n        soql.push(`AND UserType = 'Standard'`)\n        if (config.details){\n            Object.entries(config.details)\n                .forEach(record => \n                    soql.push(`AND ${record[0]} = ${this.parseValue(record[1])}`))\n        }\n        if (config.permissionSets){\n            config.permissionSets\n                .forEach(name => {\n                    soql.push(`AND Id IN`)\n                    soql.push(`(`)\n                    soql.push(`SELECT AssigneeId`)\n                    soql.push(`FROM PermissionSetAssignment`)\n                    soql.push(`WHERE IsActive = true`)\n                    soql.push(`AND PermissionSet.name = '${name}'`)\n                    soql.push(`)`)\n                })\n        }\n        return soql.join('\\n')\n    }\n\n    recordTypeByName(name: string): string{\n        return `SELECT Id FROM RecordType WHERE Name = '${name}'`\n    }\n}","import { Page } from \"@playwright/test\"\nimport { SalesforceDefaultCliUser } from \"common/SalesforceUsers\"\n\nexport class SalesforceNavigator {\n    static readonly PRODUCTION_LOGIN_URL = new URL('https://login.salesforce.com/')\n    static readonly SANDBOX_LOGIN_URL = new URL('https://test.salesforce.com/')\n    static readonly HOME_PATH = '/home/home.jsp'\n    static readonly FRONTDOOR_PATH = 'secur/frontdoor.jsp'\n    static readonly IMPERSONATION_PATH = 'servlet/servlet.su'\n    static readonly SESSIONID_PARAM = 'sid'\n    static readonly ORGANIZATION_ID_PARAM = 'oid'\n    static readonly IMPERSONATION_USER_ID_PARAM = 'suorgadminid'\n    static readonly TARGET_ULR_PARAM = 'targetURL'\n    static readonly RETURN_URL_PARAM = 'retURL'\n    static readonly APP_OR_TAB_SET_ID_PARAM = 'tsid'\n    static readonly FLEXIPAGE_COMPONENT_ID = 'data-component-id'\n    static readonly FLEXIPAGE_COMPONENT_CSS_LOCATOR = `[${SalesforceNavigator.FLEXIPAGE_COMPONENT_ID}]`\n    static readonly FLEXIPAGE_FIELD_LABEL = '.test-id__field-label'\n    static readonly FLEXIPAGE_HIGHLIGHTS_ITEM = 'records-highlights-details-item'\n\n    private constructor(){}\n\n    static buildLoginUrl(frontdoorData: {sessionId: string, instance: string}): URL{\n        const url = new URL(SalesforceNavigator.FRONTDOOR_PATH, frontdoorData.instance)\n        url.searchParams.append(SalesforceNavigator.SESSIONID_PARAM, frontdoorData.sessionId)\n        return url\n    }\n\n    static buildImpersonationUrl(data: {instanceUrl: string, orgId: string, targetUserId: string}): URL {\n        const url = new URL(SalesforceNavigator.IMPERSONATION_PATH, data.instanceUrl)\n        url.searchParams.append(SalesforceNavigator.ORGANIZATION_ID_PARAM, data.orgId)\n        url.searchParams.append(SalesforceNavigator.IMPERSONATION_USER_ID_PARAM, data.targetUserId)\n        url.searchParams.append(SalesforceNavigator.TARGET_ULR_PARAM, SalesforceNavigator.HOME_PATH)\n        url.searchParams.append(SalesforceNavigator.RETURN_URL_PARAM, SalesforceNavigator.HOME_PATH)\n        return url\n    }\n\n    static async openResource(resourcePath: string, page: Page){\n        const origin = new URL((await SalesforceDefaultCliUser._instance).info.result.url).origin\n        const resourceUrl = new URL(resourcePath, origin).toString()\n        return page.goto(resourceUrl)\n    }\n\n    static async openHome(page: Page){\n        return SalesforceNavigator.openResource(SalesforceNavigator.HOME_PATH, page)\n    }\n}","import { Page, expect } from \"@playwright/test\";\nimport { SalesforceStandardUser } from \"common/SalesforceUsers\";\nimport { FlexiPage } from \"./pages/FlexiPage\";\nimport { SOQLBuilder } from \"./SOQLBuilder\";\nimport { SalesforceNavigator } from \"./SalesforceNavigator\";\n\nexport abstract class SalesforceObject<T extends SalesforceStandardUser> {\n    public readonly user: T;\n    public flexipage: {\n        validateComponentsFor: (recordId: string) => Promise<void>\n    };\n\n    constructor (user: T){\n        this.user = user;\n        this.flexipage = {\n            validateComponentsFor: async (recordId: string) => {\n                const testInfo = this.user.api.testInfo\n                const flexipage = new FlexiPage(this.user.ui)\n                await SalesforceNavigator.openResource(recordId, this.user.ui)\n                let parsedComponents: string\n                try {\n                    if (testInfo.config.updateSnapshots !== 'none'){\n                        const safePeriod = testInfo.project.use.actionTimeout ? \n                        testInfo.project.use.actionTimeout : testInfo.timeout\n                        console.debug(`snapshot capture is on in '${testInfo.config.updateSnapshots}' mode: using implicit wait of ${safePeriod/1000}s to record`)\n                        await flexipage.ui.waitForTimeout(safePeriod)\n                    }\n                    await expect(async () => {\n                        parsedComponents = await flexipage.getComponents()\n                        expect(parsedComponents, 'components validation').toMatchSnapshot()\n                    }).toPass({timeout: testInfo.project.use.actionTimeout ? \n                        testInfo.project.use.actionTimeout : testInfo.timeout})\n                } finally {\n                    if ((testInfo.project.use.trace instanceof Object \n                            && (testInfo.project.use.trace.snapshots\n                            && testInfo.project.use.trace.mode === 'on'))\n                        || testInfo.retry === 1 && (testInfo.project.use.trace instanceof Object \n                            && (testInfo.project.use.trace.snapshots\n                            && testInfo.project.use.trace.mode === 'on-first-retry'))\n                        || testInfo.retry > 0 && (testInfo.project.use.trace instanceof Object \n                            && (testInfo.project.use.trace.snapshots\n                            && testInfo.project.use.trace.mode === 'on-all-retries'))\n                        || testInfo.error && (testInfo.project.use.trace instanceof Object \n                            && testInfo.project.use.trace.snapshots \n                            && testInfo.project.use.trace.mode === 'retain-on-failure')\n                        || testInfo.config.updateSnapshots !== 'none'){\n                            await this.attachPageSnapshot(flexipage.ui)\n                        }\n                    await testInfo.attach('snapshot-flexipage_components', {body: parsedComponents})\n                    await testInfo.attach('testrecord-sfdc_id', {body: recordId})\n                }\n            }\n        }\n    }\n\n    private async attachPageSnapshot(page: Page){\n        try {\n            await expect(page).toHaveScreenshot({maxDiffPixels: 0, fullPage: true})\n        } catch (ignore) {}\n    }\n\n    public async recordTypeIdFor(recordTypeName: string): Promise<string>{\n        return this.user.api.query(new SOQLBuilder().recordTypeByName(recordTypeName))\n            .then(queryResult => (queryResult.records[0] as any).Id)\n    }\n}\n\nexport type CreatableViaApi = {\n    createViaApi: (data?) => Promise<string>\n}\n\nexport type CreatableViaUi = {\n    createViaUI: (data?) => Promise<void>\n}\n","import { SalesforceNavigator } from \"common/SalesforceNavigator\";\nimport { SalesforcePage } from \"./SalesforcePage\";\n\nexport class FlexiPage extends SalesforcePage {\n    public async getComponents(): Promise<string> {\n        await this.scrollPageBottomTop()\n        const snapshot: string[] = []\n        await this.ui.$$(SalesforceNavigator.FLEXIPAGE_COMPONENT_CSS_LOCATOR)\n            .then(async flexipageComponents => {\n                for (const component of flexipageComponents){\n                    if (!(await component.$$(SalesforceNavigator.FLEXIPAGE_COMPONENT_CSS_LOCATOR)).length){\n                        \n                        const parseComponentId = async () => {\n                            snapshot.push(`[FLEXCOMPONENT] ${await component.getAttribute(SalesforceNavigator.FLEXIPAGE_COMPONENT_ID)}`)\n                        }\n        \n                        const parseLabeledFields = async () => {\n                            for (const field of await component.$$(SalesforceNavigator.FLEXIPAGE_FIELD_LABEL)){\n                                const label = await field.innerText()\n                                if (label){\n                                    snapshot.push(`[FIELD] ${label}`)\n                                }\n                            }\n                        }\n        \n                        const parseHighlightFields = async () => {\n                            for (const field of await component.$$(SalesforceNavigator.FLEXIPAGE_HIGHLIGHTS_ITEM)){\n                                for (const paragraph of await field.$$('*')){\n                                    const title = await paragraph.getAttribute('title')\n                                    if (title && !title.toLowerCase().includes('preview') \n                                        && !(await paragraph.getAttribute('src'))){\n                                        snapshot.push(`[FIELD] ${title}`)\n                                    }\n                                }\n                            }\n                        }\n        \n                        const parseButtons = async () => {\n                            for (const action of await component.$$('button')){\n                                const actionText = await action.innerText()\n                                if (actionText && !actionText.toLowerCase().includes('preview')){\n                                    snapshot.push(`[BUTTON] ${await action.innerText()}`)\n                                }\n                            }\n            \n                        }\n        \n                        const parseLinks = async () => {\n                            for (const hyperlink of await component.$$('a')){\n                                const title =  await hyperlink.getAttribute('title')\n                                if (title && !(await hyperlink.getAttribute('class')).toLowerCase().includes('outputlookuplink')){\n                                    snapshot.push(`[LINK] ${title}`)\n                                }\n                            }\n                        }\n        \n                        const createSnapshotFooter = () => {\n                            snapshot.push('------')\n                            snapshot.push('')\n                        }\n\n                        await parseComponentId()\n                        await parseLabeledFields()\n                        await parseHighlightFields()\n                        await parseButtons()\n                        await parseLinks()\n                        createSnapshotFooter()\n                    }\n                }\n            })\n        return snapshot.join('\\n')\n    }\n}","import { test as base } from '@playwright/test';\nimport { SalesforceStandardUser } from './SalesforceUsers';\n\ntype SalesforceFixtures = {\n    cast<T extends SalesforceStandardUser>(actor: T): Promise<T>\n}\n\nexport const test = base.extend<SalesforceFixtures>({\n    cast: async ({browser}, use, testInfo) => {\n        await use(async <T extends SalesforceStandardUser>(actor: T) => {\n            await actor.Ready.then(actor => actor.use(browser))\n            await actor.Ready.then(actor => actor.api.testInfo = testInfo)\n            return actor.Ready\n        })\n    }\n})"],"mappings":"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","names":["import_test","instance","types","modes","import_test","import_test","base","actor"]}